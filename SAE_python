#------------------------- IMPORTS -------------------------#
from upemtk import *
from math import *
#--------------------- FIN DES IMPORTS ---------------------#

rectanglePosAX = 300
rectanglePosAY = 200
rectanglePosBX = 800
rectanglePosBY = 500
#Ces 4 variables sont les coordonnées du rectangle qui servira de surface de jeu.

taille_cercle = 25
petit_taille_cercle = 10
#Ces 2 variables représentent les 2 tailles possibles de boules.

tourJoueur=1
matriceEmplacements = []
matriceEmplacementsJoueur1 = []
matriceEmplacementsJoueur2 = []

def nombre_Tours():
    """Permet de définir le nombre de tours total. Doit être pair pour que chaque joueur ait le même nombre de tours.
    """
    nbr = int(input("Entrer un nombre de tours : "))
    if nbr % 2 == 0:
        return nbr
    else:
        return False

def verifierEmplacementBoule(emplacementClic):   
    x = emplacementClic[0]
    y = emplacementClic[1]
    
    matriceEmplacementsJoueurAdversaire = []
    
    if tourJoueur==1:
        matriceEmplacementsJoueurAdversaire = matriceEmplacementsJoueur2
    else:
        matriceEmplacementsJoueurAdversaire = matriceEmplacementsJoueur1

    f = True
    
    for matriceEmplacement in matriceEmplacementsJoueurAdversaire:
        diffX = x - matriceEmplacement[0]
        diffY = y - matriceEmplacement[1]
        if (-50 < diffX < 50) and (-50 < diffY < 50):
            f = False
            print("Erreur, il y a intersection.")
        else:
            f = True   
    return f

def verifierEmplacementClic(emplacementClic):
    """Permet de resteindre le placement des boules uniquement au sein de la surface de jeu (Le rectangle).
    """
    x = emplacementClic[0]
    y = emplacementClic[1]
    positionX = rectanglePosAX + taille_cercle < x < rectanglePosBX - taille_cercle
    positionY = rectanglePosAY + taille_cercle < y < rectanglePosBY - taille_cercle
    #print(positionX, positionY)
    if positionY == True and positionX == True:
        return True
    else:
        return False

def dessinerBoule(emplacementClic):
    """ Permet de placer une boule, la couleur variera en fonction du joueur qui joue.
    """
    couleurBoule = 'blue'
    if tourJoueur==2:
        couleurBoule = 'red'

    #print(emplacementClic)
    #print('tourJoueur', tourJoueur)

    x = emplacementClic[0]
    y = emplacementClic[1]

    #print("rectanglePosBX", rectanglePosBX)

    cercle(x, y, taille_cercle, couleur=couleurBoule, remplissage=couleurBoule, epaisseur=1)


def dessiner_superficie():
    """ Permet de crée une fenêtre de 1000pixels sur 1000pixels. Ainsi qu'une surface de jeu en forme de rectangle.
    """
    
    cree_fenetre(1000, 1000)

    rectangle(rectanglePosAX, rectanglePosAY, rectanglePosBX, rectanglePosBY)

    mise_a_jour()


def main():
    global tourJoueur, matriceEmplacements, matriceEmplacementsJoueur2, matriceEmplacementsJoueur1
    nbTours = nombre_Tours()

    while nbTours == False:
        print("Le nombre de tours doit être pair")
        nbTours = nombre_Tours()

    dessiner_superficie()

    nbTourReel = 0
    while nbTourReel!=nbTours:
        #for i in range(nbTours):
        emplacementClic = attente_clic()
        if nbTourReel % 2 == 0:
            tourJoueur = 1
        else:
            tourJoueur = 2

        if verifierEmplacementClic(emplacementClic):

            if verifierEmplacementBoule(emplacementClic):
                matriceEmplacements.append(emplacementClic)
                dessinerBoule(emplacementClic)
                #print("i", nbTourReel, "tourJoueur", tourJoueur)

                if tourJoueur == 1:
                    matriceEmplacementsJoueur1.append(emplacementClic)
                else:
                    matriceEmplacementsJoueur2.append(emplacementClic)

            nbTourReel+=1
    print("Fin de la partie !")

            #print("matriceEmplacements General", matriceEmplacements)
            #print("matriceEmplacementsJoueur1", matriceEmplacementsJoueur1)
            #print("matriceEmplacementsJoueur2", matriceEmplacementsJoueur2)



    attente_touche()


if __name__ == '__main__':

   main()
