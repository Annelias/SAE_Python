from upemtk import *
from math import *
from tkinter import *

rectanglePosAX = 300
rectanglePosAY = 200
rectanglePosBX = 800
rectanglePosBY = 500
taille_cercle = 25
petit_taille_cercle = 10

tourJoueur=1
matriceEmplacements = []
matriceEmplacementsJoueur1 = []
matriceEmplacementsJoueur2 = []
global f1, f2

def nombre_Tours():
    nbr = int(input("Entrer un nombre de tours : "))
    if nbr % 2 == 0:
        return nbr
    else:
        return False

def verifierEmplacementBoule(emplacementClic):   # prbl ne fontionne pas vraiment
    x = emplacementClic[0]
    y = emplacementClic[1]
    matriceEmplacementsJoueurAdversaire = []
    if tourJoueur==1:
        matriceEmplacementsJoueurAdversaire = matriceEmplacementsJoueur2
    else:
        matriceEmplacementsJoueurAdversaire = matriceEmplacementsJoueur1

    f = True
    for matriceEmplacement in matriceEmplacementsJoueurAdversaire:
        xBoule = matriceEmplacement[0]
        yBoule = matriceEmplacement[1]
        print("x", x, "xBoule", xBoule, "taille cercle", taille_cercle, "x-xBoule", x-xBoule)
        print("y", y, "yBoule", yBoule, "taille cercle", taille_cercle, "y-yBoule", y - yBoule)
        diffBouleX = x-xBoule
        diffBouleY = y - yBoule
        positionX =  (diffBouleX > taille_cercle and diffBouleX>0) or (diffBouleX < (taille_cercle*-1) and diffBouleX < 0)
        positionY = (diffBouleY > taille_cercle and diffBouleY>0) or (diffBouleY < (taille_cercle * -1) and diffBouleY < 0)
        print("verification emplacement boule", positionX, positionY)
        if positionY  and positionX :
            break
        else:
            f = False

    print("matriceEmplacements adversaire", matriceEmplacementsJoueurAdversaire)
    return f

def verifierEmplacementClic(emplacementClic):
    x = emplacementClic[0]
    y = emplacementClic[1]
    positionX = rectanglePosAX + taille_cercle < x < rectanglePosBX - taille_cercle
    positionY = rectanglePosAY + taille_cercle < y < rectanglePosBY - taille_cercle
    #print(positionX, positionY)
    if positionY == True and positionX == True:
        return True
    else:
        return False

def dessinerBoule(emplacementClic):

    couleurBoule = 'green'
    if tourJoueur==2:
        couleurBoule = 'gold'

    print(emplacementClic)
    print('tourJoueur', tourJoueur)

    x = emplacementClic[0]
    y = emplacementClic[1]

    print("rectanglePosBX", rectanglePosBX)

    cercle(x, y, taille_cercle, couleur=couleurBoule, remplissage=couleurBoule, epaisseur=1)


def dessiner_superficie():

    image(0, 0, 'moon.png', ancrage='nw', tag = 'img')
    rectangle(rectanglePosAX, rectanglePosAY, rectanglePosBX, rectanglePosBY, couleur='black', remplissage='lightblue', epaisseur=10)
    mise_a_jour()

def main():
    dessiner_superficie()
    global tourJoueur, matriceEmplacements, matriceEmplacementsJoueur2, matriceEmplacementsJoueur1
    nbTours = nombre_Tours()

    while nbTours == False:
        print("Le nombre de tours doit pair")
        nbTours = nombre_Tours()

    nbTourReel = 0
    while nbTourReel!=nbTours:
        #for i in range(nbTours):
        emplacementClic = attente_clic()
        if nbTourReel % 2 == 0:
            tourJoueur = 1
        else:
            tourJoueur = 2

        if verifierEmplacementClic(emplacementClic):

            if verifierEmplacementBoule(emplacementClic):
                matriceEmplacements.append(emplacementClic)
                dessinerBoule(emplacementClic)
                print("i", nbTourReel, "tourJoueur", tourJoueur)

                if tourJoueur == 1:
                    matriceEmplacementsJoueur1.append(emplacementClic)
                else:
                    matriceEmplacementsJoueur2.append(emplacementClic)

            nbTourReel+=1

            #print("matriceEmplacements General", matriceEmplacements)
            #print("matriceEmplacementsJoueur1", matriceEmplacementsJoueur1)
            #print("matriceEmplacementsJoueur2", matriceEmplacementsJoueur2)



    attente_touche()

def menu():   # Créer un menu pour jouer ou quitter
    ax = 250 # Permet de créer le premier bouton dont les valeurs
    bx = 700
    ay = 450
    by = 550

    ax2 = 250  # Permet de créer le deuxième bouton dont les valeurs
    bx2 = 700
    ay2 = 650
    by2 = 750

    l1 = bx - ax   # On utlise cette formule pour centrer le texte dans les rectangles
    l2 = ay - by

    l1_1 = bx2 - ax2
    l2_2 = by2 - ay2


    rectangle(0, 0, 1000, 1000, couleur='black', remplissage='lightgreen', epaisseur=1, tag='') # Permet de mettre un fond de couleur
    image(500, 150, 'bvn.gif', ancrage='center')  # Permet de mettre une image dans le menu
    rectangle(ax, ay, bx, by, couleur='black', remplissage='lightblue', epaisseur=5)  # Affichage premier bouton sous forme rectangulaire
    texte(ax + l1/2, by + l2/2, 'Jouer', couleur='black', ancrage='center', police="Purisa", taille=18, tag='') #Permet d'écrire "Jouer" dans le premier rectangle
    rectangle(ax2, ay2, bx2, by2, couleur='black', remplissage='lightblue', epaisseur=5) # Affichage deuxième bouton sous forme rectangulaire
    texte(ax2 + l1_1/2, ay2 + l2_2/2, 'Quitter', couleur='black', ancrage='center', police="Purisa", taille=18, tag='') #Permet d'écrire "Quitter" dans le deuxième rectangle

    jeu = 0

    while jeu == 0:   # condition pour le attente clic (pour le clic des rectangles)
        x, y, t = attente_clic()

        if ax < x < bx and ay < y < by:

            jeu = 1

        if ax2 < x < bx2 and ay2 < y < by2:
            return False

    else:
        return True



#    attente_touche()

if __name__ == '__main__':
    cree_fenetre(1000, 1000)   # Création fenetre
    menu()
    if menu() == True:   # condition pour si menu = vrai cela affiche le jeu ("Jouer")
        main()   # Le jeu
    else:
        ferme_fenetre()  # Ferme la fenetre quand c'est faux ("Quitter")
